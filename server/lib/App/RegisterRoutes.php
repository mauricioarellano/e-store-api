<?php

/**
 * E-Store API - Digital Commerce Platform
 * PHP version 8.1
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * Comprehensive REST API for e-commerce operations including: - Product catalog management - Order processing and fulfillment - Customer relationship management - Inventory tracking - Sales analytics - Review and rating system  Supports OAuth2 authentication for secure operations. Version: Production Release 1.0
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@estore.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


declare(strict_types=1);

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\App;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Slim\Exception\HttpNotImplementedException;
use Dyorg\TokenAuthentication;
use OpenAPIServer\Auth\OAuthAuthenticator;

/**
 * RegisterRoutes Class Doc Comment
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class RegisterRoutes
{
    /** @var array[] list of all api operations */
    private $operations = [
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v1',
            'path' => '/categories',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'createCategory',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "Category successfully created"
}',
                ],
            ],
            'authMethods' => [
                // oauth2 security schema named 'OAuth2'
                [
                    'type' => 'oauth2',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => true,
                    'scopes' => [
                        'categories.manage', // Manage categories
                    ],
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v1',
            'path' => '/customers',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'createCustomer',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "Customer successfully created"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v1',
            'path' => '/invoices',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'createInvoice',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "Invoice successfully created"
}',
                ],
            ],
            'authMethods' => [
                // oauth2 security schema named 'OAuth2'
                [
                    'type' => 'oauth2',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => true,
                    'scopes' => [
                        'invoices.write', // Create invoices
                    ],
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v1',
            'path' => '/orders',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'createOrder',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "Order successfully created",
  "headers" : {
    "Location" : {
      "description" : "URL of created order",
      "style" : "simple",
      "explode" : false,
      "schema" : {
        "type" : "string"
      }
    }
  },
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Order"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v1',
            'path' => '/products',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'createProduct',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "Product successfully created"
}',
                ],
            ],
            'authMethods' => [
                // oauth2 security schema named 'OAuth2'
                [
                    'type' => 'oauth2',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => true,
                    'scopes' => [
                        'products.manage', // Manage products
                    ],
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v1',
            'path' => '/reviews',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'createReview',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "Review successfully created"
}',
                ],
            ],
            'authMethods' => [
                // oauth2 security schema named 'OAuth2'
                [
                    'type' => 'oauth2',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => true,
                    'scopes' => [
                        'reviews.write', // Submit reviews
                    ],
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v1',
            'path' => '/categories',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'getCategories',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Successful category retrieval",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/CategoryTree"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v1',
            'path' => '/stock',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'getInventory',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Successful inventory retrieval",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/PaginatedInventory"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v1',
            'path' => '/invoices',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'getInvoices',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Successful invoice retrieval",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/PaginatedInvoices"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v1',
            'path' => '/products',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'getProducts',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Successful products retrieval",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/PaginatedProducts"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v1',
            'path' => '/reviews',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'getReviews',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Successful reviews retrieval",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/PaginatedReviews"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v1',
            'path' => '/sales',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'getSalesData',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Successful retrieval of sales data",
  "headers" : {
    "X-RateLimit-Limit" : {
      "description" : "Maximum allowed requests per window (100 req/sec)",
      "style" : "simple",
      "explode" : false,
      "schema" : {
        "type" : "integer",
        "default" : 100
      }
    },
    "X-RateLimit-Remaining" : {
      "description" : "Remaining requests in current window",
      "style" : "simple",
      "explode" : false,
      "schema" : {
        "type" : "integer"
      }
    },
    "X-RateLimit-Reset" : {
      "description" : "Milliseconds until rate limit resets",
      "style" : "simple",
      "explode" : false,
      "schema" : {
        "type" : "integer",
        "default" : 1000
      }
    }
  },
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/PaginatedSales"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Invalid filter parameters"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized - Missing or invalid token"
}',
                ],
                '403' => [
                    'jsonSchema' => '{
  "description" : "Forbidden - Insufficient permissions"
}',
                ],
                '429' => [
                    'jsonSchema' => '{
  "description" : "Too Many Requests",
  "headers" : {
    "Retry-After" : {
      "description" : "Seconds to wait before next request",
      "style" : "simple",
      "explode" : false,
      "schema" : {
        "type" : "integer",
        "example" : 30
      }
    }
  }
}',
                ],
                '500' => [
                    'jsonSchema' => '{
  "description" : "Internal Server Error",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // oauth2 security schema named 'OAuth2'
                [
                    'type' => 'oauth2',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => true,
                    'scopes' => [
                        'sales.read', // Read sales data
                    ],
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v1',
            'path' => '/customers',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'listCustomers',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Successful customer retrieval",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/PaginatedCustomers"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v1',
            'path' => '/orders',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'listOrders',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Successful order retrieval",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/PaginatedOrders"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/v1',
            'path' => '/stock',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'updateInventory',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Inventory successfully updated"
}',
                ],
                '403' => [
                    'jsonSchema' => '{
  "description" : "Forbidden - Insufficient permissions"
}',
                ],
            ],
            'authMethods' => [
                // oauth2 security schema named 'OAuth2'
                [
                    'type' => 'oauth2',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => true,
                    'scopes' => [
                        'inventory.write', // Modify inventory
                    ],
                ],
            ],
        ],
    ];

    /**
     * Add routes to Slim app.
     *
     * @param \Slim\App $app Pre-configured Slim application instance
     *
     * @throws HttpNotImplementedException When implementation class doesn't exists
     */
    public function __invoke(\Slim\App $app): void
    {
        $app->options('/{routes:.*}', function (ServerRequestInterface $request, ResponseInterface $response) {
            // CORS Pre-Flight OPTIONS Request Handler
            return $response;
        });

        // create mock middleware factory
        /** @var \Psr\Container\ContainerInterface */
        $container = $app->getContainer();
        /** @var \OpenAPIServer\Mock\OpenApiDataMockerRouteMiddlewareFactory|null */
        $mockMiddlewareFactory = null;
        if ($container->has(\OpenAPIServer\Mock\OpenApiDataMockerRouteMiddlewareFactory::class)) {
            // I know, anti-pattern. Don't retrieve dependency directly from container
            $mockMiddlewareFactory = $container->get(\OpenAPIServer\Mock\OpenApiDataMockerRouteMiddlewareFactory::class);
        }

        foreach ($this->operations as $operation) {
            $callback = function (ServerRequestInterface $request) use ($operation) {
                $message = "How about extending {$operation['classname']} by {$operation['apiPackage']}\\{$operation['userClassname']} class implementing {$operation['operationId']} as a {$operation['httpMethod']} method?";
                throw new HttpNotImplementedException($request, $message);
            };
            $middlewares = [];

            if (class_exists("\\{$operation['apiPackage']}\\{$operation['userClassname']}")) {
                // Notice how we register the controller using the class name?
                // PHP-DI will instantiate the class for us only when it's actually necessary
                $callback = ["\\{$operation['apiPackage']}\\{$operation['userClassname']}", $operation['operationId']];
            }

            if ($mockMiddlewareFactory) {
                $mockSchemaResponses = array_map(function ($item) {
                    return json_decode($item['jsonSchema'], true);
                }, $operation['responses']);
                $middlewares[] = $mockMiddlewareFactory->create($mockSchemaResponses);
            }

            $route = $app->map(
                [$operation['httpMethod']],
                "{$operation['basePathWithoutHost']}{$operation['path']}",
                $callback
            )->setName($operation['operationId']);

            // Add authentication middleware based on the operation's authMethods
            if ($operation['authMethods']) {
                /* foreach ($operation['authMethods'] as $authMethod) {
                    if ($authMethod['isOAuth']) {
                        $route->add(new TokenAuthentication([
                            'path' => '/',
                            'authenticator' => new OAuthAuthenticator($authMethod['scopes']),
                            'regex' => '/Bearer\s+(.*)$/i',
                            'header' => 'Authorization',
                            'parameter' => null,
                            'cookie' => null,
                            'argument' => null,
                            'attribute' => 'authorization_token',
                            'error' => ['OpenAPIServer\Auth\OAuthAuthenticator', 'handleUnauthorized'],
                        ]));
                    }
                } */
            }

            foreach ($middlewares as $middleware) {
                $route->add($middleware);
            }
        }
    }
}
