<?php

/**
 * E-Store API - Digital Commerce Platform
 * PHP version 8.1
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * Comprehensive REST API for e-commerce operations including: - Product catalog management - Order processing and fulfillment - Customer relationship management - Inventory tracking - Sales analytics - Review and rating system  Supports OAuth2 authentication for secure operations. Version: Production Release 1.0
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@estore.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 * Extend this class with your controller. You can inject dependencies via class constructor,
 * @see https://github.com/PHP-DI/Slim-Bridge basic example.
 */
namespace OpenAPIServer\Api;

use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Slim\Exception\HttpNotImplementedException;

/**
 * AbstractDefaultApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class AbstractDefaultApi
{
    /**
     * POST createCategory
     * Summary: Create new category
     * Notes: Add new product category (admin only)
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function createCategory(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $body = $request->getParsedBody();
        $message = "How about implementing createCategory as a POST method in OpenAPIServer\Api\DefaultApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST createCustomer
     * Summary: Create new customer
     * Notes: Register a new customer account
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function createCustomer(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $body = $request->getParsedBody();
        $message = "How about implementing createCustomer as a POST method in OpenAPIServer\Api\DefaultApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST createInvoice
     * Summary: Generate invoice
     * Notes: Create new invoice document
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function createInvoice(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $body = $request->getParsedBody();
        $message = "How about implementing createInvoice as a POST method in OpenAPIServer\Api\DefaultApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST createOrder
     * Summary: Create new order
     * Notes: Process a new customer order
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function createOrder(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $body = $request->getParsedBody();
        $message = "How about implementing createOrder as a POST method in OpenAPIServer\Api\DefaultApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST createProduct
     * Summary: Create new product
     * Notes: Add new product to catalog (admin only)
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function createProduct(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $body = $request->getParsedBody();
        $message = "How about implementing createProduct as a POST method in OpenAPIServer\Api\DefaultApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST createReview
     * Summary: Submit review
     * Notes: Create new product review
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function createReview(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $body = $request->getParsedBody();
        $message = "How about implementing createReview as a POST method in OpenAPIServer\Api\DefaultApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getCategories
     * Summary: List product categories
     * Notes: Retrieve category hierarchy
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getCategories(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $message = "How about implementing getCategories as a GET method in OpenAPIServer\Api\DefaultApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getInventory
     * Summary: Get current inventory levels
     * Notes: Retrieve real-time stock information with filtering
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getInventory(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $queryParams = $request->getQueryParams();
        $sku = (key_exists('sku', $queryParams)) ? $queryParams['sku'] : null;
        $warehouseId = (key_exists('warehouseId', $queryParams)) ? $queryParams['warehouseId'] : null;
        $page = (key_exists('page', $queryParams)) ? $queryParams['page'] : null;
        $perPage = (key_exists('perPage', $queryParams)) ? $queryParams['perPage'] : null;
        $message = "How about implementing getInventory as a GET method in OpenAPIServer\Api\DefaultApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getInvoices
     * Summary: Retrieve invoices
     * Notes: Get financial invoices with filtering
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getInvoices(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $queryParams = $request->getQueryParams();
        $orderId = (key_exists('orderId', $queryParams)) ? $queryParams['orderId'] : null;
        $dateRange = (key_exists('dateRange', $queryParams)) ? $queryParams['dateRange'] : null;
        $message = "How about implementing getInvoices as a GET method in OpenAPIServer\Api\DefaultApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getProducts
     * Summary: List products
     * Notes: Retrieve products with filtering and search
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getProducts(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $queryParams = $request->getQueryParams();
        $categoryId = (key_exists('categoryId', $queryParams)) ? $queryParams['categoryId'] : null;
        $priceRange = (key_exists('priceRange', $queryParams)) ? $queryParams['priceRange'] : null;
        $availability = (key_exists('availability', $queryParams)) ? $queryParams['availability'] : null;
        $message = "How about implementing getProducts as a GET method in OpenAPIServer\Api\DefaultApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getReviews
     * Summary: Get product reviews
     * Notes: Retrieve product ratings and reviews
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getReviews(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $queryParams = $request->getQueryParams();
        $productId = (key_exists('productId', $queryParams)) ? $queryParams['productId'] : null;
        $minRating = (key_exists('minRating', $queryParams)) ? $queryParams['minRating'] : null;
        $message = "How about implementing getReviews as a GET method in OpenAPIServer\Api\DefaultApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getSalesData
     * Summary: Retrieve paginated sales records
     * Notes: Fetches historical sales data with filtering capabilities. Access restricted to financial managers and administrators.
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getSalesData(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $queryParams = $request->getQueryParams();
        $page = (key_exists('page', $queryParams)) ? $queryParams['page'] : null;
        $perPage = (key_exists('perPage', $queryParams)) ? $queryParams['perPage'] : null;
        $sortBy = (key_exists('sortBy', $queryParams)) ? $queryParams['sortBy'] : null;
        $sortOrder = (key_exists('sortOrder', $queryParams)) ? $queryParams['sortOrder'] : null;
        $filter = (key_exists('filter', $queryParams)) ? $queryParams['filter'] : null;
        $dateRange = (key_exists('dateRange', $queryParams)) ? $queryParams['dateRange'] : null;
        $message = "How about implementing getSalesData as a GET method in OpenAPIServer\Api\DefaultApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET listCustomers
     * Summary: List customers
     * Notes: Retrieve customer accounts with search filters
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function listCustomers(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $queryParams = $request->getQueryParams();
        $email = (key_exists('email', $queryParams)) ? $queryParams['email'] : null;
        $loyaltyTier = (key_exists('loyaltyTier', $queryParams)) ? $queryParams['loyaltyTier'] : null;
        $message = "How about implementing listCustomers as a GET method in OpenAPIServer\Api\DefaultApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET listOrders
     * Summary: List orders
     * Notes: Retrieve order history with filtering options
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function listOrders(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $queryParams = $request->getQueryParams();
        $status = (key_exists('status', $queryParams)) ? $queryParams['status'] : null;
        $customerId = (key_exists('customerId', $queryParams)) ? $queryParams['customerId'] : null;
        $dateRange = (key_exists('dateRange', $queryParams)) ? $queryParams['dateRange'] : null;
        $message = "How about implementing listOrders as a GET method in OpenAPIServer\Api\DefaultApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * PATCH updateInventory
     * Summary: Update inventory levels
     * Notes: Adjust stock quantities (requires inventory manager role)
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function updateInventory(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $body = $request->getParsedBody();
        $message = "How about implementing updateInventory as a PATCH method in OpenAPIServer\Api\DefaultApi class?";
        throw new HttpNotImplementedException($request, $message);
    }
}
