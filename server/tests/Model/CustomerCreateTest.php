<?php

/**
 * E-Store API - Digital Commerce Platform
 * PHP version 8.1
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * Comprehensive REST API for e-commerce operations including: - Product catalog management - Order processing and fulfillment - Customer relationship management - Inventory tracking - Sales analytics - Review and rating system  Supports OAuth2 authentication for secure operations. Version: Production Release 1.0
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@estore.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */
namespace OpenAPIServer\Model;

use PHPUnit\Framework\TestCase;
use OpenAPIServer\Model\CustomerCreate;

/**
 * CustomerCreateTest Class Doc Comment
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 *
 * @coversDefaultClass \OpenAPIServer\Model\CustomerCreate
 */
class CustomerCreateTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "CustomerCreate"
     */
    public function testCustomerCreate()
    {
        $testCustomerCreate = new CustomerCreate();
        $namespacedClassname = CustomerCreate::getModelsNamespace() . '\\CustomerCreate';
        $this->assertSame('\\' . CustomerCreate::class, $namespacedClassname);
        $this->assertTrue(
            class_exists($namespacedClassname),
            sprintf('Assertion failed that "%s" class exists', $namespacedClassname)
        );
        self::markTestIncomplete(
            'Test of "CustomerCreate" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "firstName"
     */
    public function testPropertyFirstName()
    {
        self::markTestIncomplete(
            'Test of "firstName" property in "CustomerCreate" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "lastName"
     */
    public function testPropertyLastName()
    {
        self::markTestIncomplete(
            'Test of "lastName" property in "CustomerCreate" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "email"
     */
    public function testPropertyEmail()
    {
        self::markTestIncomplete(
            'Test of "email" property in "CustomerCreate" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "phone"
     */
    public function testPropertyPhone()
    {
        self::markTestIncomplete(
            'Test of "phone" property in "CustomerCreate" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "password"
     */
    public function testPropertyPassword()
    {
        self::markTestIncomplete(
            'Test of "password" property in "CustomerCreate" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "shippingAddress"
     */
    public function testPropertyShippingAddress()
    {
        self::markTestIncomplete(
            'Test of "shippingAddress" property in "CustomerCreate" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "billingAddress"
     */
    public function testPropertyBillingAddress()
    {
        self::markTestIncomplete(
            'Test of "billingAddress" property in "CustomerCreate" model has not been implemented yet.'
        );
    }

    /**
     * Test getOpenApiSchema static method
     * @covers ::getOpenApiSchema
     */
    public function testGetOpenApiSchema()
    {
        $schemaArr = CustomerCreate::getOpenApiSchema();
        $this->assertIsArray($schemaArr);
    }
}

